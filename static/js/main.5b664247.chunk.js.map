{"version":3,"sources":["components/Cell.ts","components/CellManager.ts","components/Canvas.tsx","components/Menu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Cell","row","col","_alive","_col","_row","this","on","cell","CellManager","size","scale","_cells","Array","neighbours","i","j","alive","map","_","c","seed","find","e","switch","liveNeighbours","holder","getLiveNeighbours","forEach","getCell","Canvas","props","manager","fill","state","generation","cells","prevProps","prevState","snapshot","count","update","clear","console","log","key","className","width","height","live","name","x","y","stroke","strokeWidth","onClick","setState","Component","Menu","playing","handleStatus","handleClear","App","loop","setGame","bind","upClear","clearInterval","setInterval","setCounter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"igBAAqBA,E,WAMjB,WAAYC,EAAaC,GAAc,yBAJ/BC,YAI8B,OAHrBC,UAGqB,OAFrBC,UAEqB,EAClCC,KAAKH,QAAS,EACdG,KAAKD,KAAOJ,EACZK,KAAKF,KAAOF,E,mDAGFK,GACVD,KAAKH,OAASI,I,6BAeJC,GACV,OAAQF,KAAKF,OAASI,EAAKJ,MAAQE,KAAKD,OAASG,EAAKH,O,iCAItD,MAAM,QAAN,OAAeC,KAAKD,KAApB,iBAAiCC,KAAKF,Q,4BAhBtC,OAAOE,KAAKH,S,0BAIZ,OAAOG,KAAKF,O,0BAIZ,OAAOE,KAAKD,S,aCtBCI,E,WAKjB,WAAYC,EAAcC,GAAgB,yBAHlCC,YAGiC,OAFxBF,UAEwB,EACrCJ,KAAKI,KAAOA,EAAOC,EACnBL,KAAKM,OAAS,IAAIC,MAAmBP,KAAKI,M,oDAO/BT,EAAaC,GACxB,OAAOI,KAAKM,OAAOX,GAAKC,K,wCAUHD,EAAaC,GAElC,IADA,IAAIY,EAAa,EACRC,GAAK,EAAGA,GAAK,EAAGA,IACrB,IAAK,IAAIC,GAAK,EAAGA,GAAK,EAAGA,IACjBf,EAAMc,GAAK,GAAKb,EAAMc,GAAK,GAAKd,EAAMc,EAAIV,KAAKI,MAAQT,EAAMc,EAAIT,KAAKI,OAClET,IAASA,EAAMc,GAAMb,IAASA,EAAMc,GAChCV,KAAKM,OAAOX,EAAMc,GAAGb,EAAMc,GAAGC,OAC9BH,KAKpB,OAAOA,I,6BAMU,IAAD,OAChBR,KAAKM,OAAS,YAAIN,KAAKM,QAAQM,KAAI,SAACC,EAAGlB,GAAJ,OAAY,YAAI,IAAIY,MAAY,EAAKH,OAAOQ,KAAI,SAACC,EAAGjB,GACnF,IAAMkB,EAAU,IAAIpB,EAAKC,EAAKC,GAE9B,OADI,YAAImB,KAAMC,MAAK,SAACC,GAAD,OAAsBH,EAAEnB,MAAQsB,EAAE,IAAMH,EAAElB,MAAQqB,EAAE,OAAKH,EAAEI,QAAO,GAC9EJ,U,+BAsBX,IALmB,IAEfZ,EACAiB,EAHc,OACdC,EAA+B,IAAIb,MAI9BZ,EAAM,EAAGA,EAAMK,KAAKI,KAAMT,IAAO,CACtCyB,EAAOzB,GAAO,IAAIY,MAClB,IAAK,IAAIX,EAAM,EAAGA,EAAMI,KAAKI,KAAMR,IAC/BM,EAAOF,KAAKM,OAAOX,GAAKC,GACxBuB,EAAiBnB,KAAKqB,kBAAkBnB,EAAKP,IAAKO,EAAKN,MACnDM,EAAKS,OAA6B,IAAnBQ,GAA2C,IAAnBA,EAEhCjB,EAAKS,MACZS,EAAOzB,GAAKC,GAAO,EAEnBwB,EAAOzB,GAAKC,GADc,IAAnBuB,EACY,EACG,EALtBC,EAAOzB,GAAKC,GAAO,EAS/BI,KAAKM,OACAgB,SAAQ,SAACT,EAAGlB,GAAJ,OAAYkB,EAChBS,SAAQ,SAACT,EAAGjB,GAAJ,OACL,EAAK2B,QAAQ5B,EAAKC,GAAKsB,OAAOE,EAAOzB,GAAKC,GAAO,W,8BAI3C,IAAD,OACjBI,KAAKM,OAAOgB,SAAQ,SAACT,EAAWlB,GAAZ,OAA4BkB,EAAES,SAAQ,SAACT,EAASjB,GAAV,OACtD,EAAK2B,QAAQ5B,EAAKC,GAAKsB,QAAO,W,4BAlFlC,OAAOlB,KAAKM,W,KCRPkB,EAAb,kDAII,WAAYC,GAAa,IAAD,8BACpB,cAAMA,IAHFC,aAEgB,EAEpB,EAAKA,QAAU,IAAIvB,EAAYsB,EAAMrB,KAAMqB,EAAMpB,OACjD,EAAKqB,QAAQC,OACb,EAAKC,MAAQ,CACTC,WAAY,EAAKH,QAAQI,OALT,EAJ5B,+DAmBuBC,EAA0BC,EAA0BC,GAC/DF,EAAUG,MAAQlC,KAAKyB,MAAMS,OAC7BlC,KAAK0B,QAAQS,SAEbJ,EAAUK,MAAQpC,KAAKyB,MAAMW,QAC7BC,QAAQC,IAAI,YACZtC,KAAK0B,QAAQU,QACbpC,KAAK0B,QAAQS,SACbE,QAAQC,IAAI,cA3BxB,+BAoCc,IAAD,SACmBtC,KAAKyB,MAArBrB,EADH,EACGA,KAAMC,EADT,EACSA,MACNwB,EAAe7B,KAAK4B,MAApBC,WACJU,EAAM,EACV,OACI,yBAAKC,UAAU,UACX,kBAAC,QAAD,CAAOC,MAAOrC,EAAMsC,OAAQtC,GACxB,kBAAC,QAAD,CAAOqC,MAAOrC,EAAMsC,OAAQtC,GACvB,YAAIyB,GAAYjB,KAAI,SAACK,EAAgBtB,GAAjB,OAAiC,YAAIsB,GAAGL,KAAI,SAACV,EAAYN,GAC1E,IAAI+C,EAAgBzC,EAAKS,MACzB,OAAO,kBAAC,OAAD,CACH4B,IAAKA,IACLK,KAAM,SAAWjD,EAAMC,GACvB6C,MAAOpC,EACPqC,OAAQrC,EACRwC,EAAG3C,EAAKN,IAAMS,EACdyC,EAAG5C,EAAKP,IAAMU,EACdsB,KAAMgB,EAAO,QAAU,QACvBI,OAAQ,OACRC,YAAa,EACbC,QAAS,kBAAM,EAAK/B,OAAOhB,iBAxD3D,6BAsEmBA,GACXA,EAAKgB,QAAQhB,EAAKS,OAClBX,KAAKkD,SAAS,CAACrB,WAAY7B,KAAK0B,QAAQI,YAxEhD,GAA4BqB,aCJPC,E,kDAEjB,WAAY3B,GAAa,uCACfA,G,qDAGA,IACE4B,EAAYrD,KAAKyB,MAAjB4B,QACR,OACI,6BACI,4BAAQJ,QAASjD,KAAKyB,MAAM6B,cAAgBD,EAAoB,QAAV,SACtD,4BAAQJ,QAASjD,KAAKyB,MAAM8B,aAA5B,qB,GAXkBJ,aCGbK,E,kDAIjB,WAAY/B,GAAa,IAAD,8BACpB,cAAMA,IAHFgC,UAEgB,EAEpB,EAAK7B,MAAQ,CAACxB,KAAM,IAAKC,MAAO,GAAIgD,SAAS,EAAOjB,MAAO,EAAGF,MAAO,GAFjD,E,qDAKT,IAAD,EACmClC,KAAK4B,MAA5CxB,EADI,EACJA,KAAMC,EADF,EACEA,MAAO6B,EADT,EACSA,MAAOmB,EADhB,EACgBA,QAASjB,EADzB,EACyBA,MACnC,OACI,yBAAKI,UAAU,OACX,qDACA,4BACI,iHACA,gHACA,iHACA,6HAEJ,kBAAC,EAAD,CAAQpC,KAAMA,EAAMC,MAAOA,EAAO6B,MAAOA,EAAOE,MAAOA,IACvD,kBAAC,EAAD,CAAMiB,QAASA,EAASC,aAActD,KAAK0D,QAAQC,KAAK3D,MAAOuD,YAAavD,KAAK4D,QAAQD,KAAK3D,W,gCAMtGA,KAAKkD,SAAS,CAAEG,SAAUrD,KAAK4B,MAAMyB,UACjCrD,KAAK4B,MAAMyB,QACXQ,cAAc7D,KAAKyD,MAEnBzD,KAAKyD,KAAOK,YAAY9D,KAAK+D,WAAWJ,KAAK3D,MAAO,O,mCAKpDA,KAAK4B,MAAMyB,SACXrD,KAAKkD,SACL,CACIhB,MAAOlC,KAAK4B,MAAMM,MAAQ,M,gCAMlClC,KAAKkD,SACD,CACId,MAAOpC,KAAK4B,MAAMQ,MAAQ,EAC1BiB,SAAS,Q,GAhDQF,aCOba,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.5b664247.chunk.js","sourcesContent":["export default class Cell {\r\n\r\n    private _alive: boolean;\r\n    private readonly _col: number;\r\n    private readonly _row: number;\r\n\r\n    constructor(row: number, col: number) {\r\n        this._alive = false;\r\n        this._row = row;\r\n        this._col = col;\r\n    }\r\n\r\n    public switch(on: boolean): void {\r\n        this._alive = on;\r\n    }\r\n\r\n    get alive(): boolean {\r\n        return this._alive;\r\n    }\r\n\r\n    get col(): number {\r\n        return this._col;\r\n    }\r\n\r\n    get row(): number {\r\n        return this._row;\r\n    }\r\n\r\n    public equals(cell: Cell): boolean {\r\n        return (this._col === cell._col && this._row === cell._row);\r\n    }\r\n\r\n    public toString(): string {\r\n        return `Row: ${this._row} Col: ${this._col}`;\r\n    }\r\n}","import Cell from \"./Cell\";\r\nimport { seed } from \"./start.json\";\r\n\r\nexport default class CellManager {\r\n\r\n    private _cells: Array<Array<Cell>>;\r\n    private readonly size: number;\r\n\r\n    constructor(size: number, scale: number) {\r\n        this.size = size / scale;\r\n        this._cells = new Array<Array<Cell>>(this.size);\r\n    }\r\n\r\n    get cells(): Array<Array<Cell>> {\r\n        return this._cells;\r\n    }\r\n\r\n    public getCell(row: number, col: number): Cell {\r\n        return this._cells[row][col];\r\n    }\r\n\r\n    /**\r\n     * Get all the neighbours of a given cell in a 3x3 area.\r\n     *\r\n     * @param row the row of the given cell\r\n     * @param col the column of the given cell\r\n     * @returns the number of live neighbours\r\n     */\r\n    public getLiveNeighbours(row: number, col: number): number {\r\n        let neighbours = 0;\r\n        for (let i = -1; i <= 1; i++) {\r\n            for (let j = -1; j <= 1; j++) {\r\n                if (row + i >= 0 && col + j >= 0 && col + j < this.size && row + i < this.size) { // Edges verification\r\n                    if (row !== (row + i) || col !== (col + j)) { // Excludes the given cell\r\n                        if (this._cells[row + i][col + j].alive) // Increment the counter if the neighbour is alive\r\n                            neighbours++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return neighbours;\r\n    }\r\n\r\n    /**\r\n     * Creates the seed of the game.\r\n     */\r\n    public fill(): void {\r\n        this._cells = [...this._cells].map((_, row) => [...new Array<Cell>(this.size)].map((_, col) => {\r\n            const c: Cell = new Cell(row, col);\r\n            if ([...seed].find((e: Array<number>) => c.row === e[0] && c.col === e[1])) c.switch(true);\r\n            return c;\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Conway's rules:\r\n     * - Any live cell with two OR three live neighbours survives. [1]\r\n     * - Any dead cell with three live neighbours becomes a live cell. [2]\r\n     * - All other live cells die in next generation. Similarly, all other dead cells stay dead. [3]\r\n     *\r\n     * Create a new list based on the current generation.\r\n     * For each element of the current generation, depending on their state, look for live neighbours.\r\n     * If the actual cell is alive and has exactly 2 OR 3 live neighbours, nothing happens.\r\n     * Otherwise, if it is just alive OR has exactly 3 live neighbours, reverse it's state.\r\n     *\r\n     * @returns The new generation of cells.\r\n     */\r\n    public update(): void {\r\n        let holder: Array<Array<number>> = new Array<Array<number>>();\r\n        let cell: Cell;\r\n        let liveNeighbours: number;\r\n\r\n        for (let row = 0; row < this.size; row++) {\r\n            holder[row] = new Array<number>();\r\n            for (let col = 0; col < this.size; col++) {\r\n                cell = this._cells[row][col];\r\n                liveNeighbours = this.getLiveNeighbours(cell.row, cell.col);\r\n                if (cell.alive && (liveNeighbours === 2 || liveNeighbours === 3)) { // 1\r\n                    holder[row][col] = 1;\r\n                } else if (cell.alive) { // 2\r\n                    holder[row][col] = 0;\r\n                } else if (liveNeighbours === 3) { // 3\r\n                    holder[row][col] = 1;\r\n                } else holder[row][col] = 0;\r\n            }\r\n        }\r\n\r\n        this._cells\r\n            .forEach((_, row) => _\r\n                .forEach((_, col) =>\r\n                    this.getCell(row, col).switch(holder[row][col] > 0)\r\n                ))\r\n    }\r\n\r\n    public clear(): void {\r\n        this._cells.forEach((_: Cell[], row: number) => _.forEach((_: Cell, col: number) =>\r\n            this.getCell(row, col).switch(false)\r\n        ));\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport {Stage, Rect, Layer} from \"react-konva\";\r\nimport Cell from \"./Cell\";\r\nimport CellManager from \"./CellManager\";\r\n\r\nexport class Canvas extends Component<any, any> {\r\n\r\n    private manager: CellManager;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.manager = new CellManager(props.size, props.scale);\r\n        this.manager.fill();\r\n        this.state = {\r\n            generation: this.manager.cells\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the model every round.\r\n     * @param prevProps\r\n     * @param prevState\r\n     * @param snapshot\r\n     */\r\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any) {\r\n        if (prevProps.count < this.props.count) {\r\n            this.manager.update();\r\n        }\r\n        if (prevProps.clear < this.props.clear) {\r\n            console.log(\"clearing\");\r\n            this.manager.clear();\r\n            this.manager.update();\r\n            console.log(\"cleared\")\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fill the canvas with dead cells.\r\n     * The rendering creates a rectangle (square) for each element of the current generation.\r\n     * The user can click on a cell to turn it on and off.\r\n     */\r\n    render() {\r\n        const { size, scale } = this.props;\r\n        const { generation } = this.state;\r\n        let key = 0;\r\n        return (\r\n            <div className=\"canvas\">\r\n                <Stage width={size} height={size}>\r\n                    <Layer width={size} height={size}>\r\n                        {[...generation].map((e: Array<Cell>, row: number) => [...e].map((cell: Cell, col: number) => {\r\n                            let live: boolean = cell.alive;\r\n                            return <Rect\r\n                                key={key++}\r\n                                name={\"Cell_\" + (row + col)}\r\n                                width={scale}\r\n                                height={scale}\r\n                                x={cell.col * scale}\r\n                                y={cell.row * scale}\r\n                                fill={live ? \"black\" : \"white\"}\r\n                                stroke={\"grey\"}\r\n                                strokeWidth={1}\r\n                                onClick={() => this.switch(cell)}\r\n                            />;\r\n                        }))}\r\n                    </Layer>\r\n                </Stage>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Manual seeding\r\n     * Allows to turn on and off cells manually to create patterns.\r\n     * @param cell a cell that has been clicked on.\r\n     */\r\n    private switch(cell: Cell) {\r\n        cell.switch(!cell.alive);\r\n        this.setState({generation: this.manager.cells});\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nexport default class Menu extends Component<any, any> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const { playing } = this.props;\r\n        return (\r\n            <div>\r\n                <button onClick={this.props.handleStatus}>{!playing ? \"Start\" : \"Pause\"}</button>\r\n                <button onClick={this.props.handleClear}>Clear canvas</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport {Canvas} from \"./components/Canvas\";\nimport Menu from \"./components/Menu\";\n\nexport default class App extends Component<any, any> {\n\n    private loop: any;\n\n    constructor(props: any) {\n        super(props);\n        this.state = {size: 550, scale: 10, playing: false, clear: 0, count: 0 }\n    }\n\n    render(): any {\n        let { size, scale, count, playing, clear } = this.state;\n        return (\n            <div className=\"App\">\n                <h1>Conway's Game of Life</h1>\n                <ol>\n                    <li>Any live cell with fewer than two live neighbours dies, as if by underpopulation.</li>\n                    <li>Any live cell with two or three live neighbours lives on to the next generation.</li>\n                    <li>Any live cell with more than three live neighbours dies, as if by overpopulation.</li>\n                    <li>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>\n                </ol>\n                <Canvas size={size} scale={scale} count={count} clear={clear}/>\n                <Menu playing={playing} handleStatus={this.setGame.bind(this)} handleClear={this.upClear.bind(this)} />\n            </div>\n        );\n    }\n\n    private setGame(): void {\n        this.setState({ playing: !this.state.playing });\n        if (this.state.playing) {\n            clearInterval(this.loop);\n        } else {\n            this.loop = setInterval(this.setCounter.bind(this), 500);\n        }\n    }\n\n    private setCounter(): void {\n        if (this.state.playing) {\n            this.setState(\n            {\n                count: this.state.count + 1\n            });\n        }\n    }\n\n    private upClear(): void {\n        this.setState(\n            {\n                clear: this.state.clear + 1,\n                playing: false\n            });\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}